// Simple 4-tap FIR Filter
module fir_filter (
    input clk,
    input reset,
    input signed [7:0] x_in,         // 8-bit input sample
    output reg signed [15:0] y_out   // 16-bit output sample
);

    // Coefficients (b0, b1, b2, b3)
    parameter signed [7:0] b0 = 8'd3;
    parameter signed [7:0] b1 = 8'd2;
    parameter signed [7:0] b2 = 8'd1;
    parameter signed [7:0] b3 = 8'd1;

    // Sample delay registers
    reg signed [7:0] x_reg0, x_reg1, x_reg2, x_reg3;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            x_reg0 <= 0;
            x_reg1 <= 0;
            x_reg2 <= 0;
            x_reg3 <= 0;
            y_out  <= 0;
        end
        else begin
            // Shift input samples
            x_reg3 <= x_reg2;
            x_reg2 <= x_reg1;
            x_reg1 <= x_reg0;
            x_reg0 <= x_in;

            // FIR filter equation
            y_out <= (b0 * x_reg0) + (b1 * x_reg1) + (b2 * x_reg2) + (b3 * x_reg3);
        end
    end

endmodule

`timescale 1ns/1ps

module fir_filter_tb;

reg clk;
reg reset;
reg signed [7:0] x_in;
wire signed [15:0] y_out;

// Instantiate FIR filter
fir_filter uut (
    .clk(clk),
    .reset(reset),
    .x_in(x_in),
    .y_out(y_out)
);

// Clock generation
always #5 clk = ~clk;

initial begin
    // Initialize
    clk = 0;
    reset = 1;
    x_in = 0;
    #10;
    reset = 0;

    // Apply input sequence
    x_in = 8'd1;  #10;
    x_in = 8'd2;  #10;
    x_in = 8'd3;  #10;
    x_in = 8'd4;  #10;
    x_in = 8'd5;  #10;
    x_in = 8'd6;  #10;
    x_in = 8'd0;  #10;
    x_in = 8'd0;  #10;
    $finish;
end

// Monitor output
initial begin
    $monitor("Time=%0t | x_in=%d | y_out=%d", $time, x_in, y_out);
end

endmodule
